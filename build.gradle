plugins {
  id "java"
  id "io.spring.dependency-management" version "0.5.2.RELEASE"
  id "com.ewerk.gradle.plugins.querydsl" version "1.0.5"
}

repositories {
  jcenter()
}

dependencyManagement {
//For Spring Framework a plain version is used. For Spring Data we refer to a particular revision of a release train.
  imports {
    mavenBom "org.springframework:spring-framework-bom:$springVersion"
    mavenBom "org.springframework.data:spring-data-releasetrain:$springdataVersion"
  }
}

configurations {
  all*.exclude group: 'xml-apis'
  all*.exclude group: 'commons-logging'
  all*.exclude module: 'slf4j-log4j12'
}

def groupVersionOverrides = [
    "com.google.guava:guava"               : "$guavaVersion",
    "org.hibernate:hibernate-core"         : "$hibernateVersion",
    "org.hibernate:hibernate-entitymanager": "$hibernateVersion",
    "org.slf4j:slf4j-api"                  : "$slf4jVersion",
    "junit:junit"                          : "$junitVersion"
]

configurations.all {

  resolutionStrategy {

    failOnVersionConflict()

    eachDependency { DependencyResolveDetails details ->

      println details.requested.version

      def overrideVersion = groupVersionOverrides[details.requested.group + ":" + details.requested.name]

      if (overrideVersion != null && details.requested.version != overrideVersion) {
        details.useVersion overrideVersion
      }
    }
  }
}

dependencies {
  compile(
      'org.springframework.data:spring-data-jpa',
      "com.mysema.querydsl:querydsl-collections:$querydslVersion",
      "com.mysema.querydsl:querydsl-jpa:$querydslVersion",
      "joda-time:joda-time:$jodatimeVersion",
      "net.ttddyy:datasource-proxy:$ttddyyVersion",
      "org.hibernate:hibernate-ehcache:$hibernateVersion",
      "org.hibernate:hibernate-validator:$hibernateValidatorVersion",
      "org.hsqldb:hsqldb:$hsqldbVersion",
      "org.jadira.usertype:usertype.core:$jadiraVersion")

  runtime(
      "ch.qos.logback:logback-classic:$logbackVersion"
  )

//The standard dependencies section can now list Spring and Spring Data dependencies without declaring a version and still be sure all libraries are in matching versions.
  testCompile(
      "com.google.guava:guava-testlib:$guavaVersion",
      'org.springframework:spring-test',
      "org.testng:testng:$testngVersion")
}

querydsl {
  library = "com.mysema.querydsl:querydsl-apt:$querydslVersion"
  querydslSourcesDir = "src/querydsl/java"
  jpa = true
  querydslDefault = true
}

tasks.withType(JavaCompile) {
  description = "javac: ignore processor hints, keep all other hints"
  sourceCompatibility = JavaVersion.VERSION_1_7
  targetCompatibility = JavaVersion.VERSION_1_7
  options.compilerArgs += ["-Xlint:all,-processing"]
  options.encoding = "UTF-8"
}

test {
  useTestNG()
  minHeapSize = "128m"
  maxHeapSize = "128m"
}

apply from: 'wrapper.gradle'
